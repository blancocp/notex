name: Deploy to Orange Pi

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
      continue-on-error: true
    
    - name: Build application
      run: npm run build
    
    - name: Run tests (if available)
      run: |
        if npm run | grep -q "test"; then
          npm test
        else
          echo "No tests defined, skipping..."
        fi
      continue-on-error: true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Orange Pi
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          echo "üöÄ Starting deployment..."
          
          # Create project directory if it doesn't exist
          mkdir -p /home/dietpi/apps/notex
          cd /home/dietpi/apps/notex
          
          # Backup current .env if it exists
          if [ -f ".env" ]; then
            echo "üíæ Backing up .env file..."
            cp .env .env.backup
          fi
          
          # Clone or pull latest code
          if [ ! -d ".git" ]; then
            echo "üì¶ Cloning repository..."
            git clone https://github.com/blancocp/notex.git .
          else
            echo "üì• Pulling latest changes..."
            git fetch origin main
            git reset --hard origin/main
          fi
          
          # Restore .env file if backup exists
          if [ -f ".env.backup" ]; then
            echo "üîÑ Restoring .env file..."
            cp .env.backup .env
            rm .env.backup
          else
            # Create default .env if none exists
            echo "üìù Creating default .env file..."
            cat > .env << 'ENVEOF'
          # Supabase Configuration
          NEXT_PUBLIC_SUPABASE_URL=https://bwcbtafocttjdwvhuryb.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ3Y2J0YWZvY3R0amR3dmh1cnliIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM3MDk3OTksImV4cCI6MjA2OTI4NTc5OX0.aC7gxMXQTO1-lSUvUR_s2cjxm8mc7zGY8zVY7znYYJk
          SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ3Y2J0YWZvY3R0amR3dmh1cnliIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzcwOTc5OSwiZXhwIjoyMDY5Mjg1Nzk5fQ.8LzlsOibUWf42suV4G5ihmjusStcLdKPQ7JfF5mRmbg

          # Node Environment
          NODE_ENV=production

          # App Configuration
          PORT=3000

          # Disable authentication
          DISABLE_AUTH=true
          ENVEOF
          fi
          
          # Stop existing containers
          echo "üõë Stopping existing containers..."
          docker compose down || true
          
          # Build and start with Docker Compose
          echo "üèóÔ∏è Building and starting containers..."
          docker compose up --build -d
          
          # Wait for containers to be ready
          echo "‚è≥ Waiting for containers to be ready..."
          sleep 10
          
          # Check container status
          echo "üìä Container status:"
          docker compose ps
          
          # Test if application is responding
          echo "üîç Testing application..."
          if curl -f http://localhost:3001/dashboard > /dev/null 2>&1; then
            echo "‚úÖ Application is responding correctly!"
          else
            echo "‚ö†Ô∏è Application might not be ready yet, checking logs..."
            docker compose logs notex-app --tail=20
          fi
          
          echo "‚úÖ Deployment completed!"
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment to Orange Pi successful!"
        else
          echo "‚ùå Deployment to Orange Pi failed!"
        fi
